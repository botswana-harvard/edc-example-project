# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-24 19:00
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_protocol.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edc_example_project', '0003_auto_20161124_1858'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnotherBadTestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(default='f1', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('timepoint_status', models.CharField(choices=[
                 ('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(
                    editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime',
                 models.DateTimeField(editable=False, null=True)),
                ('visit_schedule_name', models.CharField(
                    editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(
                    editable=False, max_length=25)),
                ('visit_code', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('timepoint_datetime', models.DateTimeField(
                    editable=False, help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(
                    editable=False, help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(max_length=25)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)',
                                                    max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0,
                                                            help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(
                    db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), (
                    'home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), (
                    'done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment',
                                                 max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(
                    blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(
                    default=False, editable=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
            ],
            options={
                'abstract': False,
                'ordering': ('appt_datetime',),
            },
        ),
        migrations.CreateModel(
            name='BadCrfOneInline',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='BadTestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(default='f1', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ComplexTestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfFive',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfFour',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(
                    max_length=250, null=True)),
                ('show_order', models.IntegerField()),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), (
                    'NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('entry_comment', models.TextField(
                    blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Crf Metadata',
                'verbose_name': 'Crf Metadata',
            },
        ),
        migrations.CreateModel(
            name='CrfOne',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
                ('vl', models.CharField(default='No', max_length=10)),
                ('rdb', models.CharField(default='No', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfOneInline',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('f1', models.CharField(default='erik', max_length=10)),
                ('crf_one', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.CrfOne')),
            ],
        ),
        migrations.CreateModel(
            name='CrfSix',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfThree',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CrfTwo',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Crypt',
            fields=[
                ('hash', models.CharField(
                    db_index=True, max_length=128, unique=True, verbose_name='Hash')),
                ('secret', models.BinaryField(verbose_name='Secret')),
                ('algorithm', models.CharField(
                    db_index=True, max_length=25, null=True)),
                ('mode', models.CharField(
                    db_index=True, max_length=25, null=True)),
                ('cipher_mode', models.IntegerField(
                    help_text='pycrypto AES cipher mode (e.g. MODE_CBC)', null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Fk',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalComplexTestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('f1', models.CharField(max_length=10)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('fk', models.ForeignKey(blank=True, db_constraint=False, null=True,
                                         on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_example_project.Fk')),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical complex test model',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTestEncryptedModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('f1', models.CharField(db_index=True, max_length=10)),
                ('encrypted', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, db_index=True, help_text=' (Encryption: RSA local)', max_length=71)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical test encrypted model',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('f1', models.CharField(db_index=True, max_length=10)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical test model',
            },
        ),
        migrations.CreateModel(
            name='M2m',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)',
                                          max_length=250, null=True, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required',
                                                max_length=250, null=True, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0,
                                                      help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False,
                                                help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(
                    default='1.0', editable=False, max_length=35)),
            ],
        ),
        migrations.CreateModel(
            name='OtherModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(default='erik', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='RequisitionMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(
                    max_length=250, null=True)),
                ('show_order', models.IntegerField()),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), (
                    'NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('entry_comment', models.TextField(
                    blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
                ('panel_name', models.CharField(max_length=50, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Requisition Metadata',
                'verbose_name': 'Requisition Metadata',
            },
        ),
        migrations.CreateModel(
            name='RequisitionTwo',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(
                    editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('requisition_datetime', models.DateTimeField(
                    verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(
                    blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(blank=True, choices=[('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), (
                    'refused', 'Patient refused'), ('no_supplies', 'No supplies')], max_length=25, null=True, verbose_name='If not drawn, please explain')),
                ('specimen_identifier', models.CharField(
                    editable=False, max_length=50, null=True, unique=True, verbose_name='Specimen Id')),
                ('study_site', models.CharField(max_length=10, null=True)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(
                    blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(
                    max_length=25, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), (
                    'other', 'Other')], default='tube', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(
                    default=1, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(decimal_places=2, default=5.0,
                                                         help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(
                    blank=True, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(
                    editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('requisition_datetime', models.DateTimeField(
                    verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(
                    blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(blank=True, choices=[('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), (
                    'refused', 'Patient refused'), ('no_supplies', 'No supplies')], max_length=25, null=True, verbose_name='If not drawn, please explain')),
                ('specimen_identifier', models.CharField(
                    editable=False, max_length=50, null=True, unique=True, verbose_name='Specimen Id')),
                ('study_site', models.CharField(max_length=10, null=True)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(
                    blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(
                    max_length=25, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), (
                    'other', 'Other')], default='tube', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(
                    default=1, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(decimal_places=2, default=5.0,
                                                         help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(
                    blank=True, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('visit_schedule_name', models.CharField(
                    editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(
                    editable=False, max_length=25)),
                ('visit_code', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this report', validators=[
                 edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                            max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                                  max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True,
                                                   verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(
                    max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(
                    blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), (
                    'unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[
                 edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True,
                                              verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(
                    editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('appointment', models.OneToOneField(
                    on_delete=django.db.models.deletion.PROTECT, to='edc_example_project.Appointment')),
            ],
            options={
                'abstract': False,
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'report_datetime'),
            },
        ),
        migrations.CreateModel(
            name='TestEncryptedModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(max_length=10, unique=True)),
                ('encrypted', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(
                    auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(
                    auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(
                    blank=True, editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False,
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(
                    blank=True, editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('f1', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='subjectrequisition',
            name='subject_visit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='requisitiontwo',
            name='subject_visit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='requisitionmetadata',
            unique_together=set(
                [('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model', 'panel_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='crypt',
            unique_together=set([('hash', 'algorithm', 'mode')]),
        ),
        migrations.AddField(
            model_name='crftwo',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='crfthree',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='crfsix',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='crfoneinline',
            name='other_model',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.OtherModel'),
        ),
        migrations.AddField(
            model_name='crfone',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='crfmetadata',
            unique_together=set(
                [('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model')]),
        ),
        migrations.AddField(
            model_name='crffour',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='crffive',
            name='subject_visit',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='complextestmodel',
            name='fk',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.Fk'),
        ),
        migrations.AddField(
            model_name='complextestmodel',
            name='m2m',
            field=models.ManyToManyField(to='edc_example_project.M2m'),
        ),
        migrations.AddField(
            model_name='badcrfoneinline',
            name='crf_one',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.CrfOne'),
        ),
        migrations.AddField(
            model_name='badcrfoneinline',
            name='other_model',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='edc_example_project.OtherModel'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together=set(
                [('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')]),
        ),
        migrations.CreateModel(
            name='TestModelProxy',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('edc_example_project.testmodel',),
        ),
        migrations.AlterUniqueTogether(
            name='subjectvisit',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), (
                'subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code')]),
        ),
        migrations.AlterUniqueTogether(
            name='complextestmodel',
            unique_together=set([('f1', 'fk')]),
        ),
    ]
